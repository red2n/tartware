version: '3.8'

services:
  postgres:
    image: postgres:16
    container_name: tartware-postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      # Tartware initialization settings
      TARTWARE_DROP_EXISTING: ${TARTWARE_DROP_EXISTING:-true}
      TARTWARE_RUN_VERIFICATION: ${TARTWARE_RUN_VERIFICATION:-true}
      TARTWARE_BACKUP_BEFORE_DROP: ${TARTWARE_BACKUP_BEFORE_DROP:-false}
    ports:
      - "5432:5432"
    volumes:
      - tartware_postgres_data:/var/lib/postgresql/data
      # Mount all scripts for initialization (read-write for chmod)
      - ./scripts:/docker-entrypoint-initdb.d/scripts
      # Mount custom entrypoint
      - ./scripts/docker/docker-entrypoint-custom.sh:/usr/local/bin/docker-entrypoint-custom.sh
    entrypoint: ["/bin/bash", "/usr/local/bin/docker-entrypoint-custom.sh"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - tartware_network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: tartware-pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - tartware_pgadmin_data:/var/lib/pgadmin
      - ./servers.json:/pgadmin4/servers.json:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - tartware_network

volumes:
  tartware_postgres_data:
    name: tartware_postgres_data
    driver: local
  tartware_pgadmin_data:
    name: tartware_pgadmin_data
    driver: local

networks:
  tartware_network:
    name: tartware_network
    driver: bridge
